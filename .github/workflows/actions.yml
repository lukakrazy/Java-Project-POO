name: Send POST Request with Checkbox Inputs

on:
  workflow_dispatch:
    inputs:
      var1_option1:
        description: 'Incluir option1?'
        type: boolean
        default: false

      var1_option2:
        description: 'Incluir option2?'
        type: boolean
        default: false

      var1_option3:
        description: 'Incluir option3?'
        type: boolean
        default: false

      var2:
        description: 'Valor string para var2 (ignorado se s√≥ option1 estiver selecionado)'
        required: false
        type: string
        default: ''

      var3:
        description: 'Valor string para var3'
        required: true
        type: string
        default: ''

jobs:
  send-post-request:
    runs-on: ubuntu-latest

    steps:
      - name: Create JSON payload and send POST request
        env:
          TOKEN: ${{ secrets.API_TOKEN }}
          API_KEY: ${{ secrets.API_KEY }}
          VAR1_OPTION1: ${{ inputs.var1_option1 }}
          VAR1_OPTION2: ${{ inputs.var1_option2 }}
          VAR1_OPTION3: ${{ inputs.var1_option3 }}
          VAR2: ${{ inputs.var2 }}
          VAR3: ${{ inputs.var3 }}
        run: |
          # Processar as op√ß√µes selecionadas
          VAR1_ARRAY=()
          SELECTED_COUNT=0
          
          if [[ "$VAR1_OPTION1" == "true" ]]; then
            VAR1_ARRAY+=("option1")
            SELECTED_COUNT=$((SELECTED_COUNT + 1))
          fi
          
          if [[ "$VAR1_OPTION2" == "true" ]]; then
            VAR1_ARRAY+=("option2")
            SELECTED_COUNT=$((SELECTED_COUNT + 1))
          fi
          
          if [[ "$VAR1_OPTION3" == "true" ]]; then
            VAR1_ARRAY+=("option3")
            SELECTED_COUNT=$((SELECTED_COUNT + 1))
          fi
          
          # Verificar se pelo menos uma op√ß√£o foi selecionada
          if [[ ${#VAR1_ARRAY[@]} -eq 0 ]]; then
            echo "‚ùå Erro: Pelo menos uma op√ß√£o deve ser selecionada!"
            exit 1
          fi
          
          # L√≥gica condicional para VAR2
          if [[ ${#VAR1_ARRAY[@]} -eq 1 && "$VAR1_OPTION1" == "true" ]]; then
            # Se s√≥ option1 estiver selecionado, usar valor fixo
            FINAL_VAR2="lukatestecerto"
            echo "üîß S√≥ option1 selecionado - var2 ser√°: $FINAL_VAR2"
          else
            # Caso contr√°rio, usar o valor fornecido
            FINAL_VAR2="$VAR2"
            echo "üìù Usando var2 fornecido: $FINAL_VAR2"
          fi
          
          # Criar array JSON para var1
          VAR1_JSON_ARRAY=""
          for i in "${!VAR1_ARRAY[@]}"; do
            if [[ $i -eq 0 ]]; then
              VAR1_JSON_ARRAY="\"${VAR1_ARRAY[i]}\""
            else
              VAR1_JSON_ARRAY="$VAR1_JSON_ARRAY, \"${VAR1_ARRAY[i]}\""
            fi
          done
          
          # Criar o JSON payload
          JSON_PAYLOAD=$(cat <<EOF
          {
            "var1": [$VAR1_JSON_ARRAY],
            "var2": "$FINAL_VAR2",
            "var3": "$VAR3"
          }
          EOF
          )
          
          echo "JSON Payload criado:"
          echo "$JSON_PAYLOAD"
          
          # Mostrar informa√ß√µes do request que seria enviado (TESTE)
          echo "==============================================="
          echo "üß™ MODO TESTE - Request que seria enviado:"
          echo "==============================================="
          echo "URL: https://www.test.pt/t1"
          echo "Method: POST"
          echo "Headers:"
          echo "  Content-Type: application/json"
          echo "  Authorization: Bearer $TOKEN"
          echo "  X-API-Key: $API_KEY"
          echo ""
          echo "Payload JSON:"
          echo "$JSON_PAYLOAD"
          echo "==============================================="
          echo "‚úÖ Teste conclu√≠do! Dados preparados para envio."
          echo "üìù Para enviar realmente, substitua esta sec√ß√£o pelo c√≥digo curl."